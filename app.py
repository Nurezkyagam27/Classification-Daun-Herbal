# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12DXKueQQqQNOmbOr-bck-IOrH1vAHaSG
"""

import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np
# Import fungsi preprocessing spesifik untuk MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input

# --- Konfigurasi Awal (dari kode Anda) ---
# Daftar label kelas daun (sudah benar)
class_names = [
    'Daun Jambu Biji', 'Daun Kari', 'Daun Kemangi', 'Daun Kunyit',
    'Daun Mint', 'Daun Pepaya', 'Daun Sirih', 'Daun Sirsak',
    'Lidah Buaya', 'Teh Hijau'
]

# Khasiat dari masing-masing daun (sudah benar)
khasiat_daun = {
    'Daun Jambu Biji': 'Mengatasi diare, mempercepat penyembuhan luka, dan menjaga kesehatan jantung.',
    'Daun Kari': 'Menurunkan kolesterol, sumber antioksidan alami, dan baik untuk kesehatan rambut.',
    'Daun Kemangi': 'Menambah nafsu makan, memiliki sifat antibakteri, dan meredakan stres.',
    'Daun Kunyit': 'Berfungsi sebagai anti-inflamasi (anti-radang) dan membantu memperlancar sistem pencernaan.',
    'Daun Mint': 'Meredakan sakit kepala dan mual, menyegarkan napas, dan membantu pencernaan.',
    'Daun Pepaya': 'Melancarkan pencernaan, membantu meningkatkan trombosit (terutama pada demam berdarah), dan bersifat anti-kanker.',
    'Daun Sirih': 'Sebagai antiseptik alami, menghentikan pendarahan ringan, dan menjaga kesehatan mulut.',
    'Daun Sirsak': 'Dipercaya memiliki sifat anti-tumor, membantu menurunkan tekanan darah, dan meredakan peradangan.',
    'Lidah Buaya': 'Efektif untuk menyembuhkan luka bakar ringan, melembapkan kulit, dan menutrisi rambut.',
    'Teh Hijau': 'Membantu menurunkan berat badan, kaya akan antioksidan, dan meningkatkan fungsi otak.'
}

# --- Peningkatan Performa dan Akurasi ---

# 1. Gunakan cache untuk memuat model. Model hanya akan di-load sekali.
@st.cache_resource
def load_model():
    """Memuat model machine learning dari file .h5"""
    # Sesuaikan 'mobilenetv2_model.h5' dengan path/nama file model Anda
    model = tf.keras.models.load_model('mobilenetv2_model.h5')
    return model

# 2. Fungsi untuk preprocessing dan prediksi
def preprocess_and_predict(model, image):
    """
    Melakukan pra-pemrosesan gambar dan mengembalikan prediksi,
    nama kelas, dan skor keyakinan.
    """
    # Pastikan gambar dalam mode RGB
    if image.mode != 'RGB':
        image = image.convert('RGB')

    # Resize gambar ke ukuran yang diharapkan oleh model
    image = image.resize((224, 224))

    # Ubah gambar menjadi array numpy
    image_array = np.array(image)

    # Tambahkan dimensi batch
    image_array = np.expand_dims(image_array, axis=0)

    # Gunakan preprocess_input yang sesuai untuk MobileNetV2
    processed_image = preprocess_input(image_array)

    # Lakukan prediksi
    prediction = model.predict(processed_image)

    # Dapatkan indeks, nama, dan skor keyakinan
    predicted_class_index = np.argmax(prediction)
    predicted_class_name = class_names[predicted_class_index]
    confidence_score = np.max(prediction) * 100

    return predicted_class_name, confidence_score

# Muat model menggunakan fungsi yang sudah di-cache
model = load_model()

# --- UI Layout (dari kode Anda) ---
st.set_page_config(page_title="Klasifikasi Daun Herbal", layout="centered")

st.markdown(
    "<h3 style='text-align: center;'>"
    "<span style='color:#0abf53;'>CARI</span> TANAMAN HERBAL<br>"
    "<span style='color:#1abc9c;'>DENGAN</span> SATU KLIK!!"
    "</h3>", unsafe_allow_html=True)

st.markdown("---")

uploaded_file = st.file_uploader("Unggah gambar daun", type=["jpg", "jpeg", "png"])
if uploaded_file is not None and model is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Gambar Daun yang Diunggah", use_column_width=True)

    with st.spinner("Menganalisis gambar..."):
        # Panggil fungsi untuk prediksi
        predicted_class, confidence = preprocess_and_predict(model, image)
        manfaat = khasiat_daun.get(predicted_class, "Khasiat tidak ditemukan.")

    st.markdown("---")
    # Tampilkan hasil dengan tambahan skor keyakinan
    st.markdown(
        f"<p style='text-align:center; font-size:24px; color:#0abf53;'>"
        f"<strong>{predicted_class}</strong></p>",
        unsafe_allow_html=True
    )
    st.markdown(
        f"<p style='text-align:center; font-size:16px;'>"
        f"Tingkat Keyakinan: <strong>{confidence:.2f}%</strong></p>",
        unsafe_allow_html=True
    )
    st.markdown(
        f"<p style='text-align:center; font-size:18px; color:#444; border-left: 4px solid #0abf53; padding-left: 10px;'>"
        f"<strong>Khasiat:</strong> {manfaat}</p>",
        unsafe_allow_html=True
    )
elif model is None:
    st.error("Gagal memuat model. Mohon periksa file model dan coba lagi.")
    
if uploaded_file is not None and model is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Gambar Daun yang Diunggah", use_column_width=True)

    # Tentukan batas ambang keyakinan yang Anda inginkan (dalam persen)
    CONFIDENCE_THRESHOLD = 95.0 # Anda bisa coba angka lain, misal 90.0 atau 98.0

    with st.spinner("Menganalisis gambar..."):
        predicted_class, confidence = preprocess_and_predict(model, image)
        manfaat = khasiat_daun.get(predicted_class, "Khasiat tidak ditemukan.")

    st.markdown("---")

    # CEK APAKAH KEYAKINAN MELEWATI BATAS AMBANG
    if confidence >= CONFIDENCE_THRESHOLD:
        # Jika yakin, tampilkan hasil seperti biasa
        st.success(f"**Hasil Prediksi:** {predicted_class}")
        st.metric(label="Tingkat Keyakinan", value=f"{confidence:.2f}%")
        st.markdown(
            f"<p style='text-align:center; font-size:18px; color:#444; border-left: 4px solid #0abf53; padding-left: 10px;'>"
            f"<strong>Khasiat:</strong> {manfaat}</p>",
            unsafe_allow_html=True
        )
    else:
        # Jika tidak yakin, tampilkan pesan peringatan
        st.warning(f"**Maaf, jenis daun tidak dapat dikenali dengan pasti.**")
        st.info(
            f"Model menduga ini adalah '{predicted_class}', namun dengan tingkat keyakinan yang rendah ({confidence:.2f}%). "
            f"Silakan coba gambar yang lebih jelas atau dari sudut yang berbeda."
        )


# Footer Icons (dari kode Anda)
st.markdown("<br><br><br>", unsafe_allow_html=True)
st.markdown("---")
col1, col2, col3, col4, col5 = st.columns(5)
with col2:
    st.markdown('<div style="text-align:center;"><img src="https://img.icons8.com/ios/50/00e676/camera--v1.png" width="40"/></div>', unsafe_allow_html=True)
with col4:
    st.markdown('<div style="text-align:center;"><img src="https://img.icons8.com/ios/50/00e676/image.png" width="40"/></div>', unsafe_allow_html=True)
